
## Student provisioning

# if (!$skipUser) {
# 	Write-Host "Ensuring user exists in Octopus."

# 	$response = (Invoke-WebRequest "$octopusURL/api/users?skip=0&take=2147483647" -Headers $odHeaders -Method Get -ErrorVariable octoError)
# 	$allUsers = $response.Content | ConvertFrom-Json
# 	$existingUser = ($allUsers.Items | Where-Object { $_.EmailAddress -eq $studentEmail })
# 	#	Write-Output $existingUser
# 	if (!$existingUser) {
# 		Write-Host "Creating new user"

# 		$newUser = @{
# 			DisplayName = $studentDisplayName
# 			EmailAddress = $studentEmail
# 			Username = $studentEmail
# 			IsService = $false
# 			IsActive = $true
# 			Password = $studentId
# 		} | ConvertTo-Json
# 		Write-Host $newUser

# 		$response = (Invoke-WebRequest "$octopusURL/api/users" -Headers $odHeaders -Method Post -Body $newUser -ErrorVariable octoError)
# 		$newUser = $response.Content | ConvertFrom-Json
# 		$userId = $newUser.Id
# 		Write-Host "New user created: '$userId'"
# 	}
#  else {
# 		$userId = $existingUser.Id
# 		Write-Host "Found existing user: '$userId'"
# 	}
# }
# else {
# 	Write-Warning "User assurance skipped."
# }


## Space provisioning

	# $body = @{
	# 	Name = $studentSlug
	# 	Description = $description
	# 	SpaceManagersTeams = $managersTeams
	# 	SpaceManagersTeamMembers = $managerTeamMembers
	# 	IsDefault = $false
	# 	TaskQueueStopped = $false
	# } | ConvertTo-Json

	# $response = try {
	# 	Write-Host "Creating space '$studentSlug'"
	# 	(Invoke-WebRequest $octopusURL/api/spaces -Headers $odHeaders -Method Post -Body $body -ErrorVariable octoError)
	# }
	# catch [System.Net.WebException] {
	# 	$_.Exception.Response
	# }

	# if ($octoError) {
	# 	Write-Host "An error was encountered trying to create the space: $($octoError.Message)"
	# 	exit
	# }

	# $space = $response.Content | ConvertFrom-Json

	# #Write-Host $space
	# $studentSpaceId = $space.Id

	# Write-Host "Add the workshop azure account to the space"
	# ."$PSScriptRoot\add-azure-account.ps1" `
	# 	-octopusUrl $octopusURL -octopusKey $octopusKey `
	# 	-azSubscription $azSubscriptionId `
	# 	-azTenantId $azTenantId `
	# 	-azClientId $azUser `
	# 	-azSecret $azSecret `
	# 	-spaceId $studentSpaceId `


## Azure provisioning
		$azSecureSecret = ConvertTo-SecureString -String $azSecret -AsPlainText -Force
		$azCredential = New-Object -TypeName "System.Management.Automation.PSCredential" -ArgumentList $azUser, $azSecureSecret
		Connect-AzAccount -ServicePrincipal -Credential $azCredential -Tenant $azTenantId
		foreach ($studentApp in $studentAppInfos) {
			Write-Host "Creating student application: $($studentApp.AppSlug) ..."
			$azureApp = New-AzWebApp `
				-ResourceGroupName $azResourceGroupName `
				-AppServicePlan $azWebAppServicePlan `
				-Name $studentApp.AppSlug `
				-Location "West US 2" `
				#		-WhatIf
				$studentApp.AppURL = "https://$($azureApp.DefaultHostName)"
		}